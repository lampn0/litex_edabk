// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : s005_rgbblink.v
// Device     : xc7k325t-ffg900-2
// LiteX sha1 : a4cc859d
// Date       : 2022-05-17 08:19:18
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module s005_rgbblink (
	output reg  user_led0,
	output reg  user_led1,
	output reg  user_led2,
	(* dont_touch = "true" *)	input  wire clk156_p,
	input  wire clk156_n
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg  [31:0] blink_r_counter = 32'd0;
reg  [31:0] blink_g_counter = 32'd0;
reg  [31:0] blink_b_counter = 32'd0;
wire sys_clk;
wire sys_rst;
wire por_clk;
wire clk_se;
reg  int_rst = 1'd1;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign sys_clk = clk_se;
assign por_clk = clk_se;
assign sys_rst = int_rst;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
	int_rst <= 1'd0;
end

always @(posedge sys_clk) begin
	blink_r_counter <= (blink_r_counter + 1'd1);
	if ((blink_r_counter == 27'd77999999)) begin
		blink_r_counter <= 1'd0;
		user_led0 <= (~user_led0);
	end
	blink_g_counter <= (blink_g_counter + 1'd1);
	if ((blink_g_counter == 26'd38999999)) begin
		blink_g_counter <= 1'd0;
		user_led1 <= (~user_led1);
	end
	blink_b_counter <= (blink_b_counter + 1'd1);
	if ((blink_b_counter == 25'd19499999)) begin
		blink_b_counter <= 1'd0;
		user_led2 <= (~user_led2);
	end
	if (sys_rst) begin
		user_led0 <= 1'd0;
		blink_r_counter <= 32'd0;
		user_led1 <= 1'd0;
		blink_g_counter <= 32'd0;
		user_led2 <= 1'd0;
		blink_b_counter <= 32'd0;
	end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

IBUFDS IBUFDS(
	.I(clk156_p),
	.IB(clk156_n),
	.O(clk_se)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2022-05-17 08:19:18.
//------------------------------------------------------------------------------
